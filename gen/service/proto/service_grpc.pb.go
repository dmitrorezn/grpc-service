// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: service/proto/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	// grpc rest entry point to get article by its unique ID
	GetArticleByID(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*ArticleResponce, error)
	SetArticles(ctx context.Context, opts ...grpc.CallOption) (Article_SetArticlesClient, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) GetArticleByID(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*ArticleResponce, error) {
	out := new(ArticleResponce)
	err := c.cc.Invoke(ctx, "/articleservice.article/GetArticleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) SetArticles(ctx context.Context, opts ...grpc.CallOption) (Article_SetArticlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Article_ServiceDesc.Streams[0], "/articleservice.article/SetArticles", opts...)
	if err != nil {
		return nil, err
	}
	x := &articleSetArticlesClient{stream}
	return x, nil
}

type Article_SetArticlesClient interface {
	Send(*Article) error
	CloseAndRecv() (*ArticlesFeature, error)
	grpc.ClientStream
}

type articleSetArticlesClient struct {
	grpc.ClientStream
}

func (x *articleSetArticlesClient) Send(m *Article) error {
	return x.ClientStream.SendMsg(m)
}

func (x *articleSetArticlesClient) CloseAndRecv() (*ArticlesFeature, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ArticlesFeature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	// grpc rest entry point to get article by its unique ID
	GetArticleByID(context.Context, *GetArticleRequest) (*ArticleResponce, error)
	SetArticles(Article_SetArticlesServer) error
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) GetArticleByID(context.Context, *GetArticleRequest) (*ArticleResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleByID not implemented")
}
func (UnimplementedArticleServer) SetArticles(Article_SetArticlesServer) error {
	return status.Errorf(codes.Unimplemented, "method SetArticles not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_GetArticleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).GetArticleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/articleservice.article/GetArticleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).GetArticleByID(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_SetArticles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArticleServer).SetArticles(&articleSetArticlesServer{stream})
}

type Article_SetArticlesServer interface {
	SendAndClose(*ArticlesFeature) error
	Recv() (*Article, error)
	grpc.ServerStream
}

type articleSetArticlesServer struct {
	grpc.ServerStream
}

func (x *articleSetArticlesServer) SendAndClose(m *ArticlesFeature) error {
	return x.ServerStream.SendMsg(m)
}

func (x *articleSetArticlesServer) Recv() (*Article, error) {
	m := new(Article)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "articleservice.article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticleByID",
			Handler:    _Article_GetArticleByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetArticles",
			Handler:       _Article_SetArticles_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service/proto/service.proto",
}
